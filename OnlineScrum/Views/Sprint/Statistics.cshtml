@using OnlineScrum.Models
@model Item
@{
    ViewBag.Title = "Statistics";
}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.12.2/js/bootstrap-select.min.js"></script>
<script src="http://code.highcharts.com/highcharts.js"></script>
<script src="http://code.highcharts.com/modules/exporting.js"></script>

<script>
    $(function () {
        $('[data-toggle="popover"]').popover()
    })

</script>
<br />
<div class="tab col-md-offset-3">
    <ul class="nav nav-tabs" style="border-bottom:0px solid transparent">
        <li role="presentation"><a href="@Url.Action("Home", "Sprint")">Overview</a></li>
        <li role="presentation"><a href="@Url.Action("Items", "Sprint")">Items</a></li>
        <li role="presentation"><a href="@Url.Action("Meetings", "Sprint")">Meetings</a></li>
        <li role="presentation" class="active"><a href="@Url.Action("Statistics", "Sprint")">Statistics</a></li>
        <li role="presentation"><a href="#">Settings</a></li>
    </ul>
</div>

<link href="@Url.Content("~/Content/SprintMenu.css")" rel="stylesheet" />

<div class="grid">
    <div class="row" id="container" style="min-width: 400px; height: 400px; margin: 0 auto"></div>
    <br />
    <br />
    <br />
    <svg class="row" id="visualisation" width="1000" height="500" class="chart col-md-offset-1"></svg>
</div>

<script>
    var categories = "[";
    var dictionary = [];
    var array = [];

    @{
        for (var date = ((Sprint) ViewBag.Sprint).StartDate; date <= ((Sprint) ViewBag.Sprint).FinishDate; date = date.AddDays(1))
        {
            @:array.push(@(((List<Item>)ViewBag.Items).Count(m => m.ItemStatus != "Closed" && (m.DateClosed >= date || m.DateClosed == null))));
                foreach (var dev in ((List<string>) ViewBag.Members))
            {
                <text>
    if (!dictionary["@dev"])
        dictionary["@dev"] = [];
    dictionary["@dev"].push(@(((List<Item>)ViewBag.Items).Count(m => m.AssignedTo == @dev && m.ItemStatus != "Closed" && (m.DateClosed >= date || m.DateClosed == null))));
    </text>
            }
        }
    }
    var chart = new Highcharts.Chart({
        chart: {
            renderTo: 'container',
            type: 'area'
        },
        title: {
            text: 'Burndown Chart'
        },
        xAxis: {
            categories: Array.from(Array(
                @((((Sprint) ViewBag.Sprint).FinishDate - ((Sprint) ViewBag.Sprint).StartDate).TotalDays)).keys()),
            title: {
                text: '#Days'
            },
            tickInterval: 1
        },
        tooltip: {
            formatter: function () {
                return '' + this.series.name + ': ' + this.y + '';
            }
        },
        yAxis: {
            title: {
                text: '#Items'
            },
            tickInterval: 1
        },
        credits: {
            enabled: false
        },
        series: [{
            name: 'Total',
            data: array
        }]
    });
    var counter = 1;
    (Object.keys(dictionary)).forEach(function (element) {
        chart.addSeries({
            name: element,
            data: dictionary[element]
        },
            false);
    });
    chart.redraw();
</script>
