@using OnlineScrum.Models
@model Item
@{
    ViewBag.Title = "Statistics";
}
<script src="http://code.highcharts.com/highcharts.js"></script>
<script src="http://code.highcharts.com/modules/exporting.js"></script>
<script src="@Url.Content("~/Client Scripts/regression.js")"></script>
<link href="@Url.Content("~/Content/SprintMenu.css")" rel="stylesheet" />
<script src="https://rawgithub.com/laff/technical-indicators/master/technical-indicators.src.js"></script>

<br />
<div class="tab col-md-offset-3">
    <ul class="nav nav-tabs" style="border-bottom:0px solid transparent">
        <li role="presentation"><a href="@Url.Action("Home", "Sprint")">Overview</a></li>
        <li role="presentation"><a href="@Url.Action("Items", "Sprint")">Items</a></li>
        <li role="presentation"><a href="@Url.Action("Meetings", "Sprint")">Meetings</a></li>
        <li role="presentation" class="active"><a href="@Url.Action("Statistics", "Sprint")">Statistics</a></li>
        <li role="presentation"><a href="#">Settings</a></li>
    </ul>
</div>


<div class="grid">
    <div class="row" id="container" style="min-width: 400px; height: 400px; margin: 0 auto"></div>
    <br />
    Maybe add some warnings (dev closing issues, sprint slow pace, towards the end of sprint -> advise reprioritasation/delaying/fix estimations,
    if dev is done assing different issues from slow dev, a lot of days without closing (maybe facing obstacle(ask in meeting)))
</div>
@*TODO use business days*@
<script>
    var categories = "[";
    var dictionary = [];
    var array = [];
    var array2 = [];
    var offset = 0;
    var projection = 0;

    @{
        @:offset = @(((DateTime.Now.Date.AddDays(1)) - ((Sprint)ViewBag.Sprint).StartDate.Date).TotalDays);
        @:projection =  @(((List<Item>) ViewBag.Items).Count(x => x.ItemStatus == "Closed" && x.DateClosed < DateTime.Now));
        for (var date = ((Sprint) ViewBag.Sprint).StartDate; date <= ((Sprint) ViewBag.Sprint).FinishDate; date = date.AddDays(1))
        {
            @:array.push(@(((List<Item>)ViewBag.Items).Count(m => m.ItemStatus != "Closed" || m.DateClosed >= date)));
            if (date.Date > DateTime.Now.Date.AddDays(1))
            {
                    continue;
            }

            foreach (var dev in ((List<string>) ViewBag.Members))
            {
                <text>
    if (!dictionary["@dev"])
        dictionary["@dev"] = [];
    dictionary["@dev"].push(@(((List<Item>)ViewBag.Items).Count(m => m.AssignedTo == @dev && (m.ItemStatus != "Closed" || m.DateClosed >= date))));
    </text>
            }
        }
    }
    projection = projection / offset;
    for (var i = 0; i < array.length; i++) {
        array2.push(array[0]-projection * i);
    }
    var chart = new Highcharts.Chart({
        chart: {
            renderTo: 'container',
            type: 'area'
        },
        title: {
            text: 'Burndown Chart'
        },
        xAxis: {
            categories: Array.from(Array(
                @((((Sprint) ViewBag.Sprint).FinishDate - ((Sprint) ViewBag.Sprint).StartDate).TotalDays)).keys()),
            title: {
                text: '#Days'
            },
            tickInterval: 1,
            max: @((((Sprint) ViewBag.Sprint).FinishDate - ((Sprint) ViewBag.Sprint).StartDate).TotalDays)
            },
        tooltip: {
            formatter: function () {
                return '' + this.series.name + ': ' + this.y + '';
            }
        },
        yAxis: {
            title: {
                text: '#Items'
            },
            tickInterval: 1,
            min: 0
        },
        credits: {
            enabled: false
        },
        series: [{
            name: 'Total',
            data: array,
            id: 'primary',
            zoneAxis: 'x',
            zones: [
                {
                    value: offset
                },
                {
                    dashStyle: 'longdash',
                    color: '#D0D0D0'
                }
            ]
        },
        //{
        //    name: 'Projection',
        //    data: array2,
        //    id: 'sec',
        //    dashStyle: 'dot',
        //    color: '#4572A7',
        //    visible: false
        //},
        {
            name: 'Projection',
            data:array2,
            showInLegend: true,
            enableMouseTracking: false,
            type: 'trendline',
            algorithm: 'linear',
            zoneAxis: 'x',
            zones: [
                {
                    value: offset
                },
                {
                    dashStyle: 'longdash',
                    color: '#888888'
                }
            ]
        }
        //{
        //    name: 'Proj Trendline',
        //    linkedTo: 'sec',
        //    showInLegend: true,
        //    enableMouseTracking: false,
        //    type: 'trendline',
        //    algorithm: 'linear'
        //}
        ]

    });
    var counter = 1;
    (Object.keys(dictionary)).forEach(function (element) {
        chart.addSeries({
            type: 'line',
            name: element,
            data: dictionary[element]
        },
            false);
    });
    chart.redraw();

    @*var flow = new Highcharts.Chart({
        chart: {
            renderTo: 'container',
            type: 'area'
        },
        title: {
            text: 'Cumulative Flow Diagram'
        },
        xAxis: {
            categories: Array.from(Array(
                @((((Sprint) ViewBag.Sprint).FinishDate - ((Sprint) ViewBag.Sprint).StartDate).TotalDays)).keys()),
            title: {
                text: '#Days'
            },
            tickInterval: 1
        },
        tooltip: {
            formatter: function () {
                return '' + this.series.name + ': ' + this.y + '';
            }
        },
        yAxis: {
            title: {
                text: '#Items'
            },
            tickInterval: 1
        },
        credits: {
            enabled: false
        },
        series: [{
            name: 'Total',
            data: array
        }]
    });
    var counter = 1;
    (Object.keys(dictionary)).forEach(function (element) {
        flow.addSeries({
                type: 'line',
                name: element,
                data: dictionary[element]
            },
            false);
    });
    flow.redraw();*@
</script>

<h3>Tips</h3>
@{
    var itemlessDev = new List<String>();
    var devevoper = "";
    var itemTemp = 0;
    var items = 0;
    foreach (var member in @ViewBag.Members)
    {
        if ((itemTemp = ((List<Item>)ViewBag.Items).Count(m => m.AssignedTo == member && (m.ItemStatus == "Developing" || m.ItemStatus == "Testing"))) == 0)
        {
            itemlessDev.Add(member);
        }
        else
        {
            if (items < itemTemp)
            {
                items = itemTemp;
                devevoper = member;
            }
        }
    }
    <ul>
        @if (itemlessDev.Count > 0)
        {
            <li>
                <p>@String.Join(",", itemlessDev) @(itemlessDev.Count == 1 ? " has " : " have " ) no items pending. @((items != 0) ? " \nConsider helping " + @devevoper + " with " + @items + " remaining item." : "")</p>
            </li>
        }
    </ul>
}

<script>
    $(function() {
        $('[data-toggle="popover"]').popover();
    });
</script>