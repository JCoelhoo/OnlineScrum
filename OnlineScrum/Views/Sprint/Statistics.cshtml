@using OnlineScrum.Models
@model Item
@{
    ViewBag.Title = "Statistics";
}
<script src="@Url.Content("~/Client Scripts/highcharts.js")"></script>
<script src="http://code.highcharts.com/modules/exporting.js"></script>
<script src="@Url.Content("~/Client Scripts/regression.js")"></script>
<link href="@Url.Content("~/Content/SprintMenu.css")" rel="stylesheet" />
<script src="https://rawgithub.com/laff/technical-indicators/master/technical-indicators.src.js"></script>

<div class="col-md-12" style="z-index:4;background-color: white;position: fixed;">
    <br />
    <div class="tab col-md-offset-3">
        <ul class="nav nav-tabs" style="border-bottom: 0px solid transparent">
            <li role="presentation"><a href="@Url.Action("Home", "Sprint")">Overview</a></li>
            <li role="presentation"><a href="@Url.Action("Items", "Sprint")">Items</a></li>
            <li role="presentation"><a href="@Url.Action("Meetings", "Sprint")">Meetings</a></li>
            <li role="presentation" class="active"><a href="@Url.Action("Statistics", "Sprint")">Statistics</a></li>
        </ul>
    </div>
</div>

<div style="overflow: auto;padding-top: 75px">
    <div class="grid">
        <div class="row" id="container" style="min-width: 400px; height: (400 + @(ViewBag.Items.Count*10))px; margin: 0 auto"></div>
        <br />
        <h4 class="text-center">Item Effort Distribution</h4>
        <div id="sankey" class="col-md-offset-3" style="width: 800px; height: @(300+(ViewBag.Items.Count*15))px;"></div>
        <br />
    </div>
</div>
<script>
    var categories = "[";
    var dictionary = [];
    var array = [];
    var array2 = [];
    var offset = 0;
    var projection = 0;

    @{
        @:offset = @(((DateTime.Now.Date.AddDays(1) > ((Sprint)ViewBag.Sprint).FinishDate.Date
            ? ((Sprint)ViewBag.Sprint).FinishDate.Date
            : DateTime.Now.Date.AddDays(1))
            - ((Sprint)ViewBag.Sprint).StartDate.Date).TotalDays);
                @:projection =  @(((List<Item>) ViewBag.Items).Count(x => x.ItemStatus == "Closed" && ((DateTime)x.DateClosed).Date <= DateTime.Now.Date));
                for (var date = ((Sprint) ViewBag.Sprint).StartDate; date <= ((Sprint) ViewBag.Sprint).FinishDate; date = date.AddDays(1))
        {
            @:array.push(@(((List<Item>)ViewBag.Items).Count(m => m.ItemStatus != "Closed" || ((DateTime)m.DateClosed).Date >= date.Date)));
                    if (date.Date > DateTime.Now.Date.AddDays(1))
            {
                continue;
            }

            foreach (var dev in ((List<string>) ViewBag.Members))
            {
                <text>
    if (!dictionary["@dev"])
        dictionary["@dev"] = [];
    dictionary["@dev"].push(@(((List<Item>)ViewBag.Items).Count(m => m.AssignedTo == @dev && (m.ItemStatus != "Closed" || ((DateTime)m.DateClosed).Date >= date.Date))));
    </text>
            }
        }
    }
    projection = projection / offset;
    for (var i = 0; i < array.length; i++) {
        array2.push(array[0]-projection * i);
    }
    var chart = new Highcharts.Chart({
        chart: {
            renderTo: 'container',
            type: 'area',
            height: 400 + @(ViewBag.Items.Count*10)
            },
        title: {
            text: 'Burndown Chart - Sprint Progression'
        },
        xAxis: {
            categories: Array.from(Array(
                @((int)(((Sprint) ViewBag.Sprint).FinishDate - ((Sprint) ViewBag.Sprint).StartDate).TotalDays)).keys()),
            title: {
                text: '#Days'
            },
            tickInterval: 1,
            max: @((int)(((Sprint) ViewBag.Sprint).FinishDate - ((Sprint) ViewBag.Sprint).StartDate).TotalDays)
            },
        tooltip: {
            formatter: function () {
                return '' + this.series.name + ': ' + this.y + '';
            }
        },
        yAxis: {
            title: {
                text: '#Items'
            },
            tickInterval: 1,
            min: 0
        },
        credits: {
            enabled: false
        },
        series: [{
            name: 'Total',
            data: array,
            id: 'primary',
            zoneAxis: 'x',
            zones: [
                {
                    value: offset
                },
                {
                    dashStyle: 'longdash',
                    color: '#D0D0D0'
                }
            ]
        },
            //{
            //    name: 'Projection',
            //    data: array2,
            //    id: 'sec',
            //    dashStyle: 'dot',
            //    color: '#4572A7',
            //    visible: false
            //},
            {
                name: 'Projection',
                data:array2,
                showInLegend: true,
                enableMouseTracking: false,
                type: 'trendline',
                algorithm: 'linear',
                zoneAxis: 'x',
                zones: [
                    {
                        value: offset
                    },
                    {
                        dashStyle: 'longdash',
                        color: '#888888'
                    }
                ]
            }
            //{
            //    name: 'Proj Trendline',
            //    linkedTo: 'sec',
            //    showInLegend: true,
            //    enableMouseTracking: false,
            //    type: 'trendline',
            //    algorithm: 'linear'
            //}
        ]

    });
    var counter = 1;
    (Object.keys(dictionary)).forEach(function (element) {
        chart.addSeries({
            type: 'line',
            name: element,
            data: dictionary[element]
        },
            false);
    });
    chart.redraw();
</script>




<h3>Tips</h3>
@{
    var itemlessDev = new List<String>();
    var devevoper = "";
    var itemTemp = 0;
    var items = 0;
    var noClose = new List<String>();
    foreach (var member in @ViewBag.Members)
    {
        if ((itemTemp = ((List<Item>)ViewBag.Items).Count(m => m.AssignedTo == member && (m.ItemStatus != "Closed"))) == 0)
        {
            itemlessDev.Add(member);
        }
        else
        {
            if (((Sprint)ViewBag.Sprint).StartDate < (DateTime.Now.AddDays(-5)))
            {
                if (((List<Item>)ViewBag.Items).Count(m => m.DateClosed > (DateTime.Now.AddDays(-5)) && m.AssignedTo == member) == 0)
                {
                    noClose.Add(member);
                }
            }
            if (items < itemTemp)
            {
                items = itemTemp;
                devevoper = member;
            }
        }
    }
    <ul>
        @if (itemlessDev.Count > 0)
        {
            <li>
                <p>@String.Join(",", itemlessDev) @(itemlessDev.Count == 1 ? " has " : " have ") no items pending. @((items != 0) ? " \nConsider helping " + @devevoper + " with " + @items + " remaining item." : "")</p>
            </li>

        }
        @if (noClose.Count != 0)
        {
            <li>
                <p>@String.Join(",", noClose) @(noClose.Count == 1 ? " has " : " have ") not closed and issue in a few days. @String.Join(",", noClose) might need assistance in their issues.</p>
            </li>
        }
    </ul>
}


<script>
    $(function() {
        $('[data-toggle="popover"]').popover();
    });
</script>

<script type="text/javascript" src="@Url.Content("~/Client Scripts/loader.js")"></script>
<script type="text/javascript">
    $(document).ready(function() {
        google.charts.load('current', { 'packages': ['sankey'] });
        google.charts.setOnLoadCallback(drawChart);

        function drawChart() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'From');
            data.addColumn('string', 'To');
            data.addColumn('number', 'Weight');
            data.addRows([
                @{
                    var l = ((List<Item>) ViewBag.Items).GroupBy(m => m.AssignedTo).Select(g => new
                    {
                        Name = g.Key,
                        Sum = g.Sum(x => x.EstimatedEffort)
                    });
                    foreach (var i in ((List<Item>) ViewBag.Items))
                    {
                        <text>
                            ['Items', '@(i.ItemName)', @(i.EstimatedEffort)],
                            @foreach (var name in l)
                            {
                                if (name.Name != i.AssignedTo)
                                {
                                    continue;
                                }
                                <text>
                                    [
                                        '@(i.ItemName)',
                                        '@(name.Name + " - " + name.Sum)',
                                        @(i.EstimatedEffort)
                                    ],
                                </text>
                            }
                        </text>
                    }
                }
            ]);

            var options = {
                width: 600,
            };

            var chart = new google.visualization.Sankey(document.getElementById('sankey'));
            chart.draw(data, options);
        }
    });
</script>

<div id="helpModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Statistics</h4>
            </div>
            <div class="modal-body text-center">
                <p>For a more in-depth look into the Sprint, this page has some relevant graphs that will allow you to see how the Sprint is doing and if it will be completed in time.</p>
                <p><strong>Burndown chart</strong> - see the item progression and how each developer is doing as well as a progression.</p>
                <p><strong>Item Effort Distribution</strong> - see how much work is allocated to each developer and if there is a need to reallocate certain items.</p>
                <p>On the bottom of the page you will find some tips on how to make improvement and helps identify some dangerous aspects that should be reviewed.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

<script src="@Url.Content("~/Scripts/Cookie.js")" type="text/javascript"></script>

<script>
    $(document).ready(function () {
        if (!checkCookie("StatisticsHelp")) {
            $("#helpModal").modal('show');
            setCookie("StatisticsHelp", "true", 100);
        }
    });
</script>